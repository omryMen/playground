package versionedcache

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import "fmt"

import "github.com/google/go-cmp/cmp"

type ApplyOptionFunc func(c *Options) error

func (f ApplyOptionFunc) apply(c *Options) error {
	return f(c)
}

func applyOptionsOptions(c *Options, options ...Option) error {
	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type Option interface {
	apply(*Options) error
}

type withNameImpl struct {
	o string
}

func (o withNameImpl) apply(c *Options) error {
	c.Name = o.o
	return nil
}

func (o withNameImpl) Equal(v withNameImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o withNameImpl) String() string {
	name := "WithName"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

// WithName Name is just a name indicator for metrics, logger. Usually it should be service name.
func WithName(o string) Option {
	return withNameImpl{
		o: o,
	}
}

type withCacheKeyPrefixImpl struct {
	o string
}

func (o withCacheKeyPrefixImpl) apply(c *Options) error {
	c.CacheKeyPrefix = o.o
	return nil
}

func (o withCacheKeyPrefixImpl) Equal(v withCacheKeyPrefixImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o withCacheKeyPrefixImpl) String() string {
	name := "WithCacheKeyPrefix"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

// WithCacheKeyPrefix CacheKeyPrefix is a prefix for all cache keys.
func WithCacheKeyPrefix(o string) Option {
	return withCacheKeyPrefixImpl{
		o: o,
	}
}

type withBypassImpl struct {
	o bool
}

func (o withBypassImpl) apply(c *Options) error {
	c.Bypass = o.o
	return nil
}

func (o withBypassImpl) Equal(v withBypassImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o withBypassImpl) String() string {
	name := "WithBypass"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

// WithBypass Bypass disables cache usage.
func WithBypass(o bool) Option {
	return withBypassImpl{
		o: o,
	}
}

type withUseInmemoryCacheImpl struct {
	o bool
}

func (o withUseInmemoryCacheImpl) apply(c *Options) error {
	c.UseInmemoryCache = o.o
	return nil
}

func (o withUseInmemoryCacheImpl) Equal(v withUseInmemoryCacheImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o withUseInmemoryCacheImpl) String() string {
	name := "WithUseInmemoryCache"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

// WithUseInmemoryCache UseInmemoryCache indicates use or not in memory cache.
func WithUseInmemoryCache(o bool) Option {
	return withUseInmemoryCacheImpl{
		o: o,
	}
}

type withInmemoryCacheDriverImpl struct {
	o driver
}

func (o withInmemoryCacheDriverImpl) apply(c *Options) error {
	c.InmemoryCacheDriver = o.o
	return nil
}

func (o withInmemoryCacheDriverImpl) Equal(v withInmemoryCacheDriverImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o withInmemoryCacheDriverImpl) String() string {
	name := "WithInmemoryCacheDriver"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

// WithInmemoryCacheDriver InmemoryCache driver for in memory cache.
func WithInmemoryCacheDriver(o driver) Option {
	return withInmemoryCacheDriverImpl{
		o: o,
	}
}

type withKeyLockerImpl struct {
	o locker
}

func (o withKeyLockerImpl) apply(c *Options) error {
	c.KeyLocker = o.o
	return nil
}

func (o withKeyLockerImpl) Equal(v withKeyLockerImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o withKeyLockerImpl) String() string {
	name := "WithKeyLocker"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

// WithKeyLocker KeyLocker is a locking driver for preventing concurrent origin requests.
func WithKeyLocker(o locker) Option {
	return withKeyLockerImpl{
		o: o,
	}
}

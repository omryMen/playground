// Code generated by MockGen. DO NOT EDIT.
// Source: two_level_cache.go

// Package decorators is a generated GoMock package.
package decorators

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// Mockdecorated is a mock of decorated interface.
type Mockdecorated struct {
	ctrl     *gomock.Controller
	recorder *MockdecoratedMockRecorder
}

// MockdecoratedMockRecorder is the mock recorder for Mockdecorated.
type MockdecoratedMockRecorder struct {
	mock *Mockdecorated
}

// NewMockdecorated creates a new mock instance.
func NewMockdecorated(ctrl *gomock.Controller) *Mockdecorated {
	mock := &Mockdecorated{ctrl: ctrl}
	mock.recorder = &MockdecoratedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdecorated) EXPECT() *MockdecoratedMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *Mockdecorated) Clear(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockdecoratedMockRecorder) Clear(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*Mockdecorated)(nil).Clear), ctx, key)
}

// Get mocks base method.
func (m *Mockdecorated) Get(ctx context.Context, key string, deserializer func(context.Context, []byte) (interface{}, error)) (interface{}, bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, deserializer)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Get indicates an expected call of Get.
func (mr *MockdecoratedMockRecorder) Get(ctx, key, deserializer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockdecorated)(nil).Get), ctx, key, deserializer)
}

// MGet mocks base method.
func (m *Mockdecorated) MGet(ctx context.Context, keys []string, deserializer func(context.Context, []byte) (interface{}, error)) (map[string]interface{}, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", ctx, keys, deserializer)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MGet indicates an expected call of MGet.
func (mr *MockdecoratedMockRecorder) MGet(ctx, keys, deserializer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*Mockdecorated)(nil).MGet), ctx, keys, deserializer)
}

// Set mocks base method.
func (m *Mockdecorated) Set(ctx context.Context, key string, item interface{}, serializer func(context.Context, interface{}) ([]byte, error), expiration, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, item, serializer, expiration, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockdecoratedMockRecorder) Set(ctx, key, item, serializer, expiration, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Mockdecorated)(nil).Set), ctx, key, item, serializer, expiration, ttl)
}
